generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  name          String
  nickname      String?      @unique
  email         String       @unique
  password_hash String?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  image         String?
  auth_provider AuthProvider @default(LOCAL)
  is_verified   Boolean      @default(false)

  // Foreign key
  ratings         UserMovieRating[]
  watch_list      Movie[]           @relation("WatchList")
  reset_pass_code ResetPassCode?
  VerifyEmailCode VerifyEmailCode?
}

enum AuthProvider {
  LOCAL
  GOOGLE
  GITHUB
}

model ResetPassCode {
  code       String   @default("")
  expires_in DateTime @default(now())

  // Foreign key
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerifyEmailCode {
  code       String   @default("")
  expires_in DateTime @default(now())

  // Foreign key
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Movie {
  id           String   @id @default(uuid())
  title        String
  release_year Int
  gender       String
  description  String
  popularity   Float
  rating       Float    @default(0)
  runtime      Int
  image        String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Foreign key
  watched_by        User[]            @relation("WatchList")
  user_movie_rating UserMovieRating[]
}

model UserMovieRating {
  id     String @id @default(uuid())
  rating Float

  // Foreign key
  user_id  String
  user     User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  movie_id String
  movie    Movie  @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@unique([user_id, movie_id])
}
