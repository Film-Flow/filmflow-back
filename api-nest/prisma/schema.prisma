// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  nickname      String   @unique
  email         String   @unique
  password_hash String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  is_verified   Boolean  @default(false)

  // Foreign key
  ratings          UserMovieRating[]
  watch_list       Movie[]           @relation("WatchList")
  reset_pass_code  ResetPassCode?
  VerificationCode VerificationCode?

  @@map("users")
}

model ResetPassCode {
  code       String   @default("")
  expires_in DateTime @default(now())

  // Foreign key
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("reset_pass_codes")
}

model VerificationCode {
  code       String   @default("")
  expires_in DateTime @default(now())

  // Foreign key
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("verification_codes")
}

model Movie {
  id           String   @id @default(uuid())
  title        String
  release_year Int
  genres       String[]
  description  String
  popularity   Float
  rating       Float    @default(0)
  runtime      Int
  image_url    String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Foreign key
  watched_by        User[]            @relation("WatchList")
  user_movie_rating UserMovieRating[]

  @@map("movies")
}

model UserMovieRating {
  id     String @id @default(uuid())
  rating Float

  // Foreign key
  user     User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  String
  movie    Movie  @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  movie_id String

  @@unique([user_id, movie_id])
  @@map("user_movie_ratings")
}
